import { _ as __assign } from '../../chunks/bundle-DbRIJpcJ.js';
import React__default from 'react';
import { useIIFE } from '@sendbird/uikit-tools';
import { l as isSendableMessage, g as getSuggestedReplies } from '../../chunks/bundle-CoNW0R4l.js';
import { i as isDisabledBecauseFrozen, a as isDisabledBecauseMuted } from '../../chunks/bundle-E3SeQw-U.js';
import { M as MessageView } from '../../chunks/bundle-CUOsQylX.js';
import { FileViewer } from './FileViewer.js';
import { RemoveMessageModal } from './RemoveMessageModal.js';
import { T as ThreadReplySelectType } from '../../chunks/bundle-BQBvS39w.js';
import { u as useGroupChannel } from '../../chunks/bundle-Ctfi4e6I.js';
import { u as useSendbird } from '../../chunks/bundle-CR2c41RY.js';
import '@sendbird/chat/groupChannel';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-BJAkupQH.js';
import '../../chunks/bundle-DZsEFGf2.js';
import '../../chunks/bundle-COmS_fte.js';
import '../../chunks/bundle-34AUt0BR.js';
import '../../chunks/bundle-rLN6zwDR.js';
import '../../chunks/bundle-XjvHd1hm.js';
import '../../chunks/bundle-Cv0coWWZ.js';
import '../../chunks/bundle-CPT6JkaQ.js';
import '../../Message/hooks/useDirtyGetMentions.js';
import '../../ui/DateSeparator.js';
import '../../chunks/bundle-DTONsAg3.js';
import '../../chunks/bundle-DQVSPiqe.js';
import '../../ui/MessageInput.js';
import '../../chunks/bundle-CmV4hGKo.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../chunks/bundle-Bnuhw3xk.js';
import 'dompurify';
import '../../chunks/bundle-SWqCpAHS.js';
import '../../chunks/bundle-Clc9Q0F3.js';
import '../../chunks/bundle-BS39H5y8.js';
import '../../ui/Icon.js';
import '../../chunks/bundle-DReYPOOW.js';
import '../../chunks/bundle-BDw9MgcJ.js';
import '../../ui/MessageContent.js';
import '../../chunks/bundle-BoHxQjRf.js';
import '../../ui/Loader.js';
import '../../chunks/bundle-DN85cQrs.js';
import '../../chunks/bundle-CyJpjuTl.js';
import '../../chunks/bundle-3Qj3c7g1.js';
import '../../chunks/bundle-Dz7CEFlD.js';
import 'react-dom';
import '@sendbird/chat';
import '@sendbird/chat/openChannel';
import '../../ui/SortByRow.js';
import '../../chunks/bundle-BJaAgf7u.js';
import '../../chunks/bundle-DW6-i24T.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/ImageRenderer.js';
import '../../ui/ReactionButton.js';
import '../../chunks/bundle-BOYaDbqk.js';
import '../../chunks/bundle-Cf0Yt_FB.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/BottomSheet.js';
import '../../hooks/useModal.js';
import '../../chunks/bundle-Bad3gFT1.js';
import '../../ui/UserListItem.js';
import '../../chunks/bundle-BMIXDSgA.js';
import '../../chunks/bundle-Cb0mwRBB.js';
import '../../chunks/bundle-CsvU0ytJ.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../chunks/bundle-BAj-PSqM.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../Message/context.js';
import '../../chunks/bundle-ChmyvPCX.js';
import '../../ui/AdminMessage.js';
import '../../ui/QuoteMessage.js';
import '../../chunks/bundle-SY7lsPoU.js';
import '@sendbird/chat/message';
import '../../ui/MobileMenu.js';
import '../../ui/ThreadReplies.js';
import '../../chunks/bundle-DZX5QUNj.js';
import '../../ui/OGMessageItemBody.js';
import '../../chunks/bundle-D2O7dIZa.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../ui/TextMessageItemBody.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/TextButton.js';
import '../../chunks/bundle-CWfh7mbT.js';
import '../../ui/FileViewer.js';
import '../../chunks/bundle-CSfT7kMK.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../chunks/bundle-23R2lZts.js';
import '../../VoiceRecorder/context.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../ui/UnknownMessageItemBody.js';
import '../../ui/TemplateMessageItemBody.js';
import '../../chunks/bundle-BeFPtjzn.js';
import '../../ui/FallbackTemplateMessageItemBody.tsx.js';
import '../../ui/LoadingTemplateMessageItemBody.tsx.js';
import '../../ui/MessageFeedbackFailedModal.js';
import '../../ui/FeedbackIconButton.js';
import '../../ui/MobileFeedbackMenu.js';
import '../../ui/MessageFeedbackModal.js';
import '../../ui/Input.js';
import '../../chunks/bundle-Cme2y2_4.js';
import './SuggestedReplies.js';
import '../../chunks/bundle-Ct1N0Nbc.js';
import '../../chunks/bundle-CZcA85Iz.js';
import '../../chunks/bundle-CyMsxClg.js';
import '../../chunks/bundle-DbQSQOQR.js';
import '../../chunks/bundle-vkYV8qI6.js';
import '../../chunks/bundle-tM4TiqWF.js';
import '../../chunks/bundle-WAB__IWd.js';

var Message = function (props) {
    var state = useSendbird().state;
    var config = state.config, emojiManager = state.emojiManager;
    var _a = useGroupChannel(), _b = _a.state, loading = _b.loading, currentChannel = _b.currentChannel, animatedMessageId = _b.animatedMessageId, replyType = _b.replyType, threadReplySelectType = _b.threadReplySelectType, isReactionEnabled = _b.isReactionEnabled, nicknamesMap = _b.nicknamesMap, renderUserMentionItem = _b.renderUserMentionItem, filterEmojiCategoryIds = _b.filterEmojiCategoryIds, onQuoteMessageClick = _b.onQuoteMessageClick, onReplyInThreadClick = _b.onReplyInThreadClick, onMessageAnimated = _b.onMessageAnimated, onBeforeDownloadFileMessage = _b.onBeforeDownloadFileMessage, messages = _b.messages, _c = _a.actions, toggleReaction = _c.toggleReaction, setQuoteMessage = _c.setQuoteMessage, setAnimatedMessageId = _c.setAnimatedMessageId, scrollToMessage = _c.scrollToMessage, updateUserMessage = _c.updateUserMessage, sendUserMessage = _c.sendUserMessage, resendMessage = _c.resendMessage, deleteMessage = _c.deleteMessage;
    var message = props.message;
    var initialized = !loading && Boolean(currentChannel);
    var shouldRenderSuggestedReplies = useIIFE(function () {
        var _a = config.groupChannel, enableSuggestedReplies = _a.enableSuggestedReplies, showSuggestedRepliesFor = _a.showSuggestedRepliesFor;
        // Use `allMessages[allMessages.length - 1]` instead of `currentGroupChannel.lastMessage`
        // because lastMessage is not updated when **Bot** sends messages
        var lastMessageInView = messages[messages.length - 1];
        var hasUnsentMessage = isSendableMessage(lastMessageInView) && lastMessageInView.sendingStatus !== 'succeeded';
        var showSuggestedReplies = showSuggestedRepliesFor === 'all_messages'
            ? true
            : message.messageId === lastMessageInView.messageId;
        return enableSuggestedReplies && getSuggestedReplies(message).length > 0 && !hasUnsentMessage && showSuggestedReplies;
    });
    return (React__default.createElement(MessageView, __assign({}, props, { channel: currentChannel, emojiContainer: emojiManager.emojiContainer, editInputDisabled: !initialized
            || isDisabledBecauseFrozen(currentChannel !== null && currentChannel !== void 0 ? currentChannel : undefined)
            || isDisabledBecauseMuted(currentChannel !== null && currentChannel !== void 0 ? currentChannel : undefined)
            || !config.isOnline, shouldRenderSuggestedReplies: shouldRenderSuggestedReplies, isReactionEnabled: isReactionEnabled !== null && isReactionEnabled !== void 0 ? isReactionEnabled : false, replyType: replyType !== null && replyType !== void 0 ? replyType : 'NONE', threadReplySelectType: threadReplySelectType !== null && threadReplySelectType !== void 0 ? threadReplySelectType : ThreadReplySelectType.PARENT, nicknamesMap: nicknamesMap, renderUserMentionItem: renderUserMentionItem, filterEmojiCategoryIds: filterEmojiCategoryIds, scrollToMessage: scrollToMessage, toggleReaction: toggleReaction, setQuoteMessage: setQuoteMessage, onQuoteMessageClick: onQuoteMessageClick, onReplyInThreadClick: onReplyInThreadClick, sendUserMessage: sendUserMessage, updateUserMessage: updateUserMessage, resendMessage: resendMessage, deleteMessage: deleteMessage, animatedMessageId: animatedMessageId, setAnimatedMessageId: setAnimatedMessageId, onMessageAnimated: onMessageAnimated, renderFileViewer: function (props) { return React__default.createElement(FileViewer, __assign({}, props)); }, renderRemoveMessageModal: function (props) { return React__default.createElement(RemoveMessageModal, __assign({}, props)); }, usedInLegacy: false, onBeforeDownloadFileMessage: onBeforeDownloadFileMessage })));
};

export { Message, Message as default };
//# sourceMappingURL=Message.js.map

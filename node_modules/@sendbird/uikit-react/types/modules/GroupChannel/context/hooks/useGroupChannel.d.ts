import type { GroupChannel } from '@sendbird/chat/groupChannel';
import type { SendbirdError } from '@sendbird/chat';
import type { FileMessage, FileMessageCreateParams, MultipleFilesMessage, MultipleFilesMessageCreateParams, UserMessage, UserMessageCreateParams, UserMessageUpdateParams } from '@sendbird/chat/message';
import { SendableMessageType } from '../../../../utils';
import type { GroupChannelState, MessageActions } from '../types';
export interface GroupChannelActions extends MessageActions {
    setCurrentChannel: (channel: GroupChannel) => void;
    handleChannelError: (error: SendbirdError) => void;
    sendUserMessage: (params: UserMessageCreateParams) => Promise<UserMessage>;
    sendFileMessage: (params: FileMessageCreateParams) => Promise<FileMessage>;
    sendMultipleFilesMessage: (params: MultipleFilesMessageCreateParams) => Promise<MultipleFilesMessage>;
    updateUserMessage: (messageId: number, params: UserMessageUpdateParams) => Promise<UserMessage>;
    setQuoteMessage: (message: SendableMessageType | null) => void;
    setAnimatedMessageId: (messageId: number | null) => void;
    setIsScrollBottomReached: (isReached: boolean) => void;
    scrollToBottom: (animated?: boolean) => Promise<void>;
    scrollToMessage: (createdAt: number, messageId: number, messageFocusAnimated?: boolean, scrollAnimated?: boolean) => Promise<void>;
    toggleReaction: (message: SendableMessageType, emojiKey: string, isReacted: boolean) => void;
}
export declare const useGroupChannel: () => {
    state: GroupChannelState;
    actions: GroupChannelActions;
};

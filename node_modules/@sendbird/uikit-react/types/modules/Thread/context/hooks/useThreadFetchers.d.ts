import { BaseMessage } from '@sendbird/chat/message';
import { CoreMessageType, SendableMessageType } from '../../../../utils';
import { LoggerInterface } from '../../../../lib/Logger';
import { ThreadListStateTypes } from '../../types';
type Params = {
    anchorMessage?: SendableMessageType;
    parentMessage: SendableMessageType | null;
    isReactionEnabled?: boolean;
    logger: LoggerInterface;
    threadListState: ThreadListStateTypes;
    oldestMessageTimeStamp: number;
    latestMessageTimeStamp: number;
    initializeThreadListStart: () => void;
    initializeThreadListSuccess: (parentMessage: BaseMessage, anchorMessage: SendableMessageType, threadedMessages: BaseMessage[]) => void;
    initializeThreadListFailure: () => void;
    getPrevMessagesStart: () => void;
    getPrevMessagesSuccess: (threadedMessages: CoreMessageType[]) => void;
    getPrevMessagesFailure: () => void;
    getNextMessagesStart: () => void;
    getNextMessagesSuccess: (threadedMessages: CoreMessageType[]) => void;
    getNextMessagesFailure: () => void;
};
export declare const useThreadFetchers: ({ isReactionEnabled, anchorMessage, parentMessage: staleParentMessage, logger, oldestMessageTimeStamp, latestMessageTimeStamp, threadListState, initializeThreadListStart, initializeThreadListSuccess, initializeThreadListFailure, getPrevMessagesStart, getPrevMessagesSuccess, getPrevMessagesFailure, getNextMessagesStart, getNextMessagesSuccess, getNextMessagesFailure, }: Params) => {
    initializeThreadFetcher: (callback?: (messages: BaseMessage[]) => void) => Promise<void>;
    fetchPrevThreads: (callback?: (messages: BaseMessage[]) => void) => Promise<void>;
    fetchNextThreads: (callback?: (messages: BaseMessage[]) => void) => Promise<void>;
};
export {};
